name: "Smart Checkout Action"
description: "Perform an optimized checkout a repository. In case of checkout-type=branch, it will calculate and fetch the minimum commits for head and base refs to ensure the merge base commit is included. In case of checkout-type=commit, it will checkout the specific commit SHA on the main branch, guaranteeing HEAD is pointing to the commit."

inputs:
  checkout-type:
    description: 'The type of the checkout. Either "branch" or "commit"'
    required: true
    default: "branch"

  base-branch:
    description: "The base branch name. Required if checkout-type=branch"
    required: true
    default: "main"
  head-branch:
    description: "The head branch name. Required if checkout-type=branch"
    required: true
    default: ${{ github.head_ref || github.ref_name }}

  commit:
    description: "The commit SHA to checkout. Required if checkout-type=commit"
    required: false
    default: ${{ github.sha }}
  main-branch:
    description: "The main branch name. Required if checkout-type=commit"
    required: false
    default: "main"

  lfs:
    description: "Whether to use LFS caching"
    required: true
    default: "false"
  lfs-token:
    description: "The GitHub token to use for LFS. Required if pushing in other steps"
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - name: "[checkout-type=commit] Calculate the fetch depth for the head and base branches"
      if: ${{ inputs.checkout-type == 'branch' }}
      shell: bash
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        BASE_BRANCH_NAME: ${{ inputs.base-branch }}
        HEAD_BRANCH_NAME: ${{ inputs.head-branch }}
        GH_TOKEN: ${{ github.token }}
      run: |
        compare_output=$(gh api repos/${GITHUB_REPOSITORY}/compare/${BASE_BRANCH_NAME}...${HEAD_BRANCH_NAME} --jq '{ahead_by: .ahead_by, behind_by: .behind_by}')

        # The number of commits the head branch is behind the base branch.
        base_depth=$(echo $compare_output | jq -r '. | .behind_by + 1')

        # The number of commits the head branch is ahead of the base branch.
        head_depth=$(echo $compare_output | jq -r '. | .ahead_by + 1')

        echo "BASE_FETCH_DEPTH=${base_depth}" >> "$GITHUB_ENV"
        echo "HEAD_FETCH_DEPTH=${head_depth}" >> "$GITHUB_ENV"

    - name: "[checkout-type=branch] Checkout the head branch without LFS caching"
      if: ${{ inputs.checkout-type == 'branch' && inputs.lfs == 'false' }}
      uses: actions/checkout@v4.2.2
      with:
        ref: ${{ inputs.head-branch }}
        fetch-depth: ${{ env.HEAD_FETCH_DEPTH }}
        lfs: false

    - name: "[checkout-type=branch] Checkout the head branch with LFS caching"
      if: ${{ inputs.checkout-type == 'branch' && inputs.lfs == 'true' }}
      uses: nschloe/action-cached-lfs-checkout@v1.2.3
      with:
        ref: ${{ inputs.head-branch }}
        fetch-depth: ${{ env.HEAD_FETCH_DEPTH }}
        token: ${{ inputs.lfs-token }}

    - name: "[checkout-type=commit] Checkout the main branch without LFS caching"
      if: ${{ inputs.checkout-type == 'commit' && inputs.lfs == 'false' }}
      uses: actions/checkout@v4.2.2
      with:
        ref: ${{ inputs.main-branch }}
        fetch-depth: 0
        lfs: false

    - name: "[checkout-type=commit] Checkout the main branch with LFS caching"
      if: ${{ inputs.checkout-type == 'commit' && inputs.lfs == 'true' }}
      uses: nschloe/action-cached-lfs-checkout@v1.2.3
      with:
        ref: ${{ inputs.main-branch }}
        fetch-depth: 0
        token: ${{ inputs.lfs-token }}

    - name: "[checkout-type=branch] Fetch the base branch"
      if: ${{ inputs.checkout-type == 'branch'}}
      shell: bash
      env:
        BASE_BRANCH_NAME: ${{ inputs.base-branch }}
        BASE_FETCH_DEPTH: ${{ env.BASE_FETCH_DEPTH }}
      run: git fetch origin ${BASE_BRANCH_NAME} --depth=${BASE_FETCH_DEPTH}

    - name: "[checkout-type=commit] Reset the head to the commit SHA"
      if: ${{ inputs.checkout-type == 'commit'}}
      shell: bash
      env:
        COMMIT_SHA: ${{ inputs.commit }}
      run: git reset --hard ${COMMIT_SHA}

    - name: "List fetched branches"
      shell: bash
      run: git branch -r

    - name: "List fetched commits"
      shell: bash
      run: git log --oneline --decorate --graph --all
